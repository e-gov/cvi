"use strict";(self.webpackChunkcvi_components=self.webpackChunkcvi_components||[]).push([[5224],{"./libs/ui/src/lib/screenreader-text/screenreader-text.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>screenreader_text_component_stories});const screenreader_text_component_stories={title:"Angular/Screenreader text",component:__webpack_require__("./libs/ui/src/lib/screenreader-text/screenreader-text.component.ts").y,parameters:{docs:{description:{component:'## General description\n\nFeature | Description\n- | -\nSelector | `cvi-ng-screenreader-text`\nComponent name | `ScreenreaderTextComponent`\nDesign system module | -\nContent | no\nPermitted parent/ancestors | any (usually an interactive element such as button)\nPermitted children | -\n\n## Where to use\n\nUse to provide some label to an accessibility device while hiding it visually. This will help to avoid a WCAG violation such as "Buttons must have discernible text". This is an alternative technique to using `aria-label` attribute.\n'}},layout:"padded"},args:{label:"Some text that should only be visible to a screen reader"}},Default={render:args=>({props:args,template:'\n      <button>\n        <cvi-ng-icon name="add" [height]="30"></cvi-ng-icon>\n        <cvi-ng-screenreader-text [label]="label"></cvi-ng-screenreader-text>\n      </button>\n    '})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: (args: ScreenreaderTextComponent) => ({\n    props: args,\n    /* template */\n    template: `\n      <button>\n        <cvi-ng-icon name="add" [height]="30"></cvi-ng-icon>\n        <cvi-ng-screenreader-text [label]="label"></cvi-ng-screenreader-text>\n      </button>\n    `\n  })\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]}}]);